// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package pgstore

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type DeviceState string

const (
	DeviceStateAvailable DeviceState = "available"
	DeviceStateInUse     DeviceState = "in-use"
	DeviceStateInactive  DeviceState = "inactive"
)

func (e *DeviceState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeviceState(s)
	case string:
		*e = DeviceState(s)
	default:
		return fmt.Errorf("unsupported scan type for DeviceState: %T", src)
	}
	return nil
}

type NullDeviceState struct {
	DeviceState DeviceState `json:"device_state"`
	Valid       bool        `json:"valid"` // Valid is true if DeviceState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeviceState) Scan(value interface{}) error {
	if value == nil {
		ns.DeviceState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeviceState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeviceState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeviceState), nil
}

type Device struct {
	ID        int32            `json:"id"`
	Name      string           `json:"name"`
	Brand     string           `json:"brand"`
	State     DeviceState      `json:"state"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}
