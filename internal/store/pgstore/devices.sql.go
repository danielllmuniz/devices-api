// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: devices.sql

package pgstore

import (
	"context"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (name, brand, state)
VALUES ($1, $2, $3)
RETURNING id, name, brand, state, created_at
`

type CreateDeviceParams struct {
	Name  string      `json:"name"`
	Brand string      `json:"brand"`
	State DeviceState `json:"state"`
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice, arg.Name, arg.Brand, arg.State)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :one
DELETE FROM devices
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteDevice(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, deleteDevice, id)
	err := row.Scan(&id)
	return id, err
}

const getAllDevices = `-- name: GetAllDevices :many
SELECT id, name, brand, state, created_at
FROM devices
ORDER BY created_at DESC
`

func (q *Queries) GetAllDevices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.Query(ctx, getAllDevices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.State,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeviceById = `-- name: GetDeviceById :one
SELECT id, name, brand, state, created_at
FROM devices
WHERE id = $1
`

func (q *Queries) GetDeviceById(ctx context.Context, id int32) (Device, error) {
	row := q.db.QueryRow(ctx, getDeviceById, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const getDevicesByBrand = `-- name: GetDevicesByBrand :many
SELECT id, name, brand, state, created_at
FROM devices
WHERE brand = $1
ORDER BY created_at DESC
`

func (q *Queries) GetDevicesByBrand(ctx context.Context, brand string) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDevicesByBrand, brand)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.State,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicesByBrandAndState = `-- name: GetDevicesByBrandAndState :many
SELECT id, name, brand, state, created_at
FROM devices
WHERE brand = $1 AND state = $2
ORDER BY created_at DESC
`

type GetDevicesByBrandAndStateParams struct {
	Brand string      `json:"brand"`
	State DeviceState `json:"state"`
}

func (q *Queries) GetDevicesByBrandAndState(ctx context.Context, arg GetDevicesByBrandAndStateParams) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDevicesByBrandAndState, arg.Brand, arg.State)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.State,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDevicesByState = `-- name: GetDevicesByState :many
SELECT id, name, brand, state, created_at
FROM devices
WHERE state = $1
ORDER BY created_at DESC
`

func (q *Queries) GetDevicesByState(ctx context.Context, state DeviceState) ([]Device, error) {
	rows, err := q.db.Query(ctx, getDevicesByState, state)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.State,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchDevice = `-- name: PatchDevice :one
UPDATE devices
SET name = COALESCE(NULLIF($2, ''), name),
    brand = COALESCE(NULLIF($3, ''), brand),
    state = COALESCE(NULLIF($4, ''), state)
WHERE id = $1
RETURNING id, name, brand, state, created_at
`

type PatchDeviceParams struct {
	ID      int32       `json:"id"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
	Column4 interface{} `json:"column_4"`
}

func (q *Queries) PatchDevice(ctx context.Context, arg PatchDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, patchDevice,
		arg.ID,
		arg.Column2,
		arg.Column3,
		arg.Column4,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}

const updateDevice = `-- name: UpdateDevice :one
UPDATE devices
SET name = $2,
    brand = $3,
    state = $4
WHERE id = $1
RETURNING id, name, brand, state, created_at
`

type UpdateDeviceParams struct {
	ID    int32       `json:"id"`
	Name  string      `json:"name"`
	Brand string      `json:"brand"`
	State DeviceState `json:"state"`
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, updateDevice,
		arg.ID,
		arg.Name,
		arg.Brand,
		arg.State,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.State,
		&i.CreatedAt,
	)
	return i, err
}
